import{U as t}from"./Utils.n4EkZCRG.js";const i={"+":(r,a)=>r+a,"-":(r,a)=>r-a,"*":(r,a)=>r*a,"/":(r,a)=>r/a,EQ:(r,a)=>r===a,NE:(r,a)=>r!==a,GT:(r,a)=>r>a,GE:(r,a)=>r>=a,LT:(r,a)=>r<a,LE:(r,a)=>r<=a,AND:(r,a)=>t.toBinaryString(t.parseBinary(r)&t.parseBinary(a)),OR:(r,a)=>t.toBinaryString(t.parseBinary(r)|t.parseBinary(a)),XOR:(r,a)=>t.toBinaryString(t.parseBinary(r)^t.parseBinary(a)),NOT:r=>t.toBinaryString(~t.parseBinary(r)),SIN:r=>Math.sin(t.degreesToRadians(r)),COS:r=>Math.cos(t.degreesToRadians(r)),TAN:r=>Math.tan(t.degreesToRadians(r)),ASIN:r=>t.radiansToDegrees(Math.asin(r)),ACOS:r=>t.radiansToDegrees(Math.acos(r)),ATAN:r=>t.radiansToDegrees(Math.atan(r)),SQRT:r=>Math.sqrt(r),ABS:r=>Math.abs(r),ROUND:r=>Math.round(r),EXP:r=>Math.exp(r),LN:r=>Math.log(r),FIX:r=>Math.floor(r),FUP:r=>Math.ceil(r),B2D:r=>t.parseBinary(r).toString(),D2B:r=>t.toBinaryString(r*1)},s={get(r,a){const e=a.toUpperCase();return(...o)=>{if(!(e in r))throw new Error(`${this.constructor.name}ï¼ŒOperation ${e} is not defined.`);const n=r[e](...o);return typeof n=="number"?t.formatNumber(n):typeof n=="string"||typeof n=="boolean"?t.formatStringOrBoolean(n):n}}},y=new Proxy(i,s);export{y as M};
