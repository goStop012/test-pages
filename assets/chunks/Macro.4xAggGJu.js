import{U as t}from"./Utils.DC-NElVd.js";const s={"+":(a,r)=>a+r,"-":(a,r)=>a-r,"*":(a,r)=>a*r,"/":(a,r)=>a/r,eq:(a,r)=>a===r,ne:(a,r)=>a!==r,gt:(a,r)=>a>r,ge:(a,r)=>a>=r,lt:(a,r)=>a<r,le:(a,r)=>a<=r,and:(a,r)=>t.toBinaryString(t.parseBinary(a)&t.parseBinary(r)),or:(a,r)=>t.toBinaryString(t.parseBinary(a)|t.parseBinary(r)),xor:(a,r)=>t.toBinaryString(t.parseBinary(a)^t.parseBinary(r)),not:a=>t.toBinaryString(~t.parseBinary(a)),sin:a=>Math.sin(t.degreesToRadians(a)),cos:a=>Math.cos(t.degreesToRadians(a)),tan:a=>Math.tan(t.degreesToRadians(a)),asin:a=>t.radiansToDegrees(Math.asin(a)),acos:a=>t.radiansToDegrees(Math.acos(a)),atan:a=>t.radiansToDegrees(Math.atan(a)),sqrt:a=>Math.sqrt(a),abs:a=>Math.abs(a),round:a=>Math.round(a),exp:a=>Math.exp(a),ln:a=>Math.log(a),fix:a=>Math.floor(a),fup:a=>Math.ceil(a),b2d:a=>t.parseBinary(a).toString(),d2b:a=>t.toBinaryString(a*1),pi:Math.PI},i={get(a,r){const e=a[r.toLocaleLowerCase()];return typeof e=="function"?(...o)=>{const n=e(...o);if(typeof n=="number")return t.formatNumber(n);if(typeof n=="string"||typeof n=="boolean")return t.formatStringOrBoolean(n)}:e}},p=new Proxy(s,i);export{p as M};
